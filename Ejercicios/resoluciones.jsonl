{"prompt": "\nEscriba un programa en el que el usuario ingrese una cantidad de segundos y se le impriman en pantalla la\ncantidad de horas, minutos y segundos.\n", "completion": "\nuser = input (\"Ingrese una cantidad de segundos: \")\nuser = int(user)\nhoras = user//3600\nsobrante = user%3600\nminutos = (sobrante)//60\nsegundos = (sobrante)%60\nprint(f\"{user} segundos representan {horas} horas {minutos} minutos {segundos} segundos\")\n"}
{"prompt": "\nCree un programa que simule un juego de Adivinanza, en este caso el jugador debe adivinar la palabra\n\u201cProfesor\u201d, mostrando solamente \u201cP______r\u201d. Se debe mostrar la pista: \u201cse dedica profesionalmente a la\nense\u00f1anza\u201d. Si el jugador adivina la palabra, el programa debe imprimir True, caso contario False.\n", "completion": "\nimport random as rd\nprint(\"Adivina la palabra\")\n se puede poner m\u00e1s intento en este caso lo limito a uno\n Imagino que solo supiera primer parcial\nl_palabras = ['Profesor','Cantante','Futbolista','Presidente']\npistas = ['se dedica profesionalmente a la ense\u00f1anza','se dedica profesionalmente a cantar','se dedica profesionalmente a jugar futbol','se dedica a gobernar un pais']\npalabra = rd.sample (l_palabras,1) [0]\npista = pistas[ l_palabras.index(palabra) ]\nprint(f\"Pista :{pista}\")\nmostrar = palabra[0] + ( \"_\"*(len(palabra)-2) ) + palabra[-1]\nprint(mostrar)\nuser = input(\"Ingrese la palabra: \").strip()\nif user == palabra : \n    print (True)\nelse:\n    print (False)\n"}
{"prompt": "\nEscriba un programa que permita ver a los estudiantes de la ESPOL si reprobaron una materia o no (en\nuna materia donde la ponderaci\u00f3n es 80% teorico y 20% pr\u00e1ctico). El programa pedir\u00e1 al usuario ingresar\nsu nota de primer parcial, su nota de segundo parcial, su nota de mejoramiento y su nota pr\u00e1ctica,\ntodas sobre 100 (como se muestra en el sistema acad\u00e9mico). Adem\u00e1s, pedir\u00e1 ingresar su numero de faltas\ny su n\u00famero total de clases. Recodemos que aquel estudiante que tenga menos de 60/100 de promedio\nacad\u00e9mico o menos 60% de asistencia a clases est\u00e1n quedado.\n", "completion": "\nprint(\"Importante : Ingrese sus notas sobre 100. \")\nparcial1 = float(input(\"Ingrese nota primer parcial: \"))\nparcial2= float(input(\"Ingrese nota segundo parcial: \"))\nrecuperacion = float(input(\"Ingrese nota mejoramiento: \"))\npratica = float(input(\"Ingrese nota practica: \"))\nfaltas = int(input(\"Ingrese numero de faltas: \"))\nclases = int(input(\"Ingrese numero total de clases: \"))\nponderacion_teo = 0.8\nponderacion_prac = 0.2\nlista_notas = [parcial1,parcial2,recuperacion]\nlista_notas.sort(reverse=True) \nnota1 = lista_notas[0]\nnota2 = lista_notas[1]\nteorico_pro = ((nota1+nota2)/2) * ponderacion_teo\npractico_pro = pratica * ponderacion_prac\npromedio_final  = teorico_pro + practico_pro\nasistencia = (clases-faltas)/clases\nprint(nota1,nota2,promedio_final,practico_pro,teorico_pro)\nif promedio_final < 60 or asistencia < 0.6:\n    print (\"Has reprobado la materia\")\nelse : \n    print(\"Has aprobado la materia\")\n\n"}
{"prompt": "\nLa siguiente es una lista de personas que participan en un sorteo de electrodom\u00e9sticos:\n[\u201cLuis\u201d,\u201dRafael\u201d,\u201dDiego\u201d,\u201dCarlos\u201d,\u201dRodrigo\u201d,\u201dSteven\u201d,\u201dJose\u201d,\u201dMiguel\u201d,\u201dLuka\u201d,\u201dJorge\u201d,\u201dMike\u201d,\u201dIbai\u201d]\nUsando funciones de listas, escriba un programa en el que se saque tres ganadores de forma aleatoria y\nmuestre el premio que consigue cada ganador. El primer ganador obtiene una Licuadora, el segundo\nganador obtiene una Freidora de Aire y el tercer ganador obtiene una Refrigeradora. Los ganadores se\npueden repetir.\n", "completion": "\nimport random as rd\nlista = [\"Luis\",\"Rafael\",\"Diego\",\"Carlos\",\"Rodrigo\",\"Steven\",\"Jose\",\"Miguel\",\"Luka\",\"Jorge\",\"Mike\",\"Ibai\"]\nfor x in range(3) :\n    num = rd.randint(0,len(lista)-1)\n    if x == 0 :\n        print (f\"El ganador de la licuadora es {lista[num]}\")\n    elif x == 1 : \n        print (f\"El ganador de la Freidora de Aire es {lista[num]}\")\n    else :\n        print (f\"El ganador de la Refrigeradora es {lista[num]}\")\n\n"}
{"prompt": "\nUna avioneta est\u00e1 a punto de quedarse sin gasolina, entonces los pasajeros se sortean los \u00fanicos tres\nparaca\u00eddas que quedan. A continuaci\u00f3n, se encuentra la lista de pasajeros que est\u00e1n volando en esa\navioneta:\n[\u201cLuis\u201d,\u201dRafael\u201d,\u201dDiego\u201d,\u201dCarlos\u201d,\u201dRodrigo\u201d,\u201dSteven\u201d,\u201dJose\u201d,\u201dMiguel\u201d,\u201dLuka\u201d,\u201dJorge\u201d,\u201dMike\u201d,\u201dIbai\u201d]\nUsando funciones de listas, escriba un programa en el que realice los sorteos imprimiendo los ganadores\n(uno por vez), recuerde que el que gana el paraca\u00eddas, ya no participa en el siguiente sorteo. Finalmente\nmuestre la lista de las personas que se quedaron en la avioneta.\n", "completion": "\nimport random as rd\nlista = [\"Luis\",\"Rafael\",\"Diego\",\"Carlos\",\"Rodrigo\",\"Steven\",\"Jose\",\"Miguel\",\"Luka\",\"Jorge\",\"Mike\",\"Ibai\"]\nganadores = rd.sample(lista,3)\nprint (\"Ganadores: \")\nquedados = lista\nfor ganador in ganadores :\n    print (ganador)\n    quedados.remove(ganador)\nprint (f\"Los que quedaron en la avioneta son:  {quedados}\")\n"}
{"prompt": "\nImplemente la funci\u00f3n buscar_par_descendente(l_numeros) que recibe una lista de n\u00fameros enteros.\nLa funci\u00f3n debe encontrar el primer par de elementos adyacentes en la lista l_numeros que est\u00e1n en\norden descendente y devuelve el \u00edndice del primer elemento del par. Si no existe tal par, devuelve\nNone.\nEjemplo:\nPara la lista [1,3,4,6,4,7,6] el retorno ser\u00eda tres\nPara la lista [1,3,4,5,6,7,6] el retorno ser\u00eda 5\nPara la lista [1,3,4,5,6,7,8] el retorno ser\u00eda None\nLuego escriba un programa principal que genere una lista de 17 n\u00fameros aleatorios entre 15 y 28 y\nmuestre el resultado de invocar a su funci\u00f3n con esa lista.\n", "completion": "\nimport random as rd\ndef buscar_par_descendente(l_numeros):\n    for i in range(len(l_numeros)-1):\n        if l_numeros[i] > l_numeros[i+1]:\n            return i\nlista=[]\nfor n in range(17):\n    num = rd.randint(15,28)\n    lista.append(num)\nprint(buscar_par_descendente(lista))\n"}
{"prompt": "\nImplemente la funci\u00f3n justificar(linea, tama\u00f1o) que recibe una l\u00ednea de texto y un entero.\nSuponga que la l\u00ednea est\u00e1 compuesta por dos o m\u00e1s palabras separadas por un espacio en blanco y que\nsu longitud es menor a tama\u00f1o. En la l\u00ednea no hay d\u00edgitos ni s\u00edmbolos especiales (solo letras y espacios\nen blanco). Entonces su funci\u00f3n debe completar la longitud de la l\u00ednea hasta llegar a ser exactamente\nigual a tama\u00f1o. Para esto agregue lo m\u00e1s equitativamente posible espacios en blanco entre las\npalabras de la l\u00ednea empezando desde la izquierda. Observe que la nueva l\u00ednea no puede empezar ni\nterminar con espacios en blanco.\nLa funci\u00f3n debe retornar esa nueva l\u00ednea.\nEjemplo:\nSi se pide justificar a tama\u00f1o de 61 la frase:\n\"Este es un buen d\u00eda para aprobar fundamentos\"\nLa funci\u00f3n retornar\u00eda:\n\"Este--- es--- un--- buen-- d\u00eda-- para-- aprobar-- fundamentos\"\nObserve que se usa \"-\" para representar los espacios en blanco a\u00f1adidos. En la solucion final no se debe\nusar \"-\" sino espacios en blanco.\n", "completion": "\ndef justificar(linea, tama\u00f1o):\n    resultado = tama\u00f1o - len(linea)\n    n_espacios= linea.count(' ')\n    cant_exac = resultado // n_espacios\n    sobrantes= resultado % n_espacios\n    lista= linea.split(\" \")\n    for i in range(sobrantes):\n        lista[i] += \" \"\n    unir = \" \"*(cant_exac+1)\n    linea_justificada = unir.join(lista)\n    return linea_justificada\n\nresult = justificar(\"Este es un buen d\u00eda para aprobar fundamentos.\",100)\nprint (result)\n\n"}
{"prompt": "\nImplementa la funci\u00f3n calcular_porcentajes(l_partidos,l_goles) que recibe dos listas paralelas.\nLa lista l_partidos es una lista de strings con los nombres de los equipos que se enfrentan en cada\npartido de la primera etapa del mundial de Qatar. La lista l_goles es tambi\u00e9n una lista de strings con\nlos goles marcados por cada uno de los equipos en los partidos representados en la lista l_partidos.\nEjemplo:\nl_partidos = [\"CAT-ECU\",\"ARG-MEX\",\"BRA-SUI\",\"ECU-SEN\",...]\nl_goles = [\"0-2\",\"2-0\",\"1-0\",\"2-1\",...]\nDebe retornar una nueva lista de tuplas con los puntos en esta fase del mundial. Recuerde que una\nvictoria otorga tres puntos al equipo ganador. Un empate otorga 1 punto a ambos equipos y, la derrota\n0 puntos al equipo perdedor.\nEjemplo del retorno:\n[(\"ECU\",7),(\"CAT\",0),(\"BRA\",9),(\"ARG\",5),...]\n", "completion": "\nl_goles = [\"0-2\",\"1-1\",\"4-1\",\"2-0\"]\nl_partidos = [\"CAT-ECU\",\"ARG-MEX\",\"BRA-SUI\",\"ECU-SEN\"]\ndef calcular_puntajes(l_partidos,l_goles) :\n    paises=[] \n\n    puntos=[] \n    for partido,resultado in zip(l_partidos,l_goles) : \n        pais1,pais2 = partido.split(\"-\") \n        if pais1 not in paises:\n            paises.append(pais1)\n        if pais2 not in paises:\n            paises.append(pais2)\n        pos1 = paises.index(pais1)  \n        pos2 = paises.index(pais2)  \n        if pos1 > len(puntos)-1 :   \n            puntos.append(0)\n        if pos2 > len(puntos)-1 : \n            puntos.append(0)\n        \n        gm1,gm2 = resultado.split(\"-\")\n        gm1 = int(gm1) \n        gm2 = int(gm2)  \n        if gm1 > gm2 :      \n            puntos[pos1] += 3    \n        elif gm2 > gm1 :     \n            puntos[pos2] += 3\n        elif gm1 == gm2 :    \n            puntos[pos1] += 1\n            puntos[pos2] += 1\n    listaf = []\n    for pais,puntos_p in zip(paises,puntos) :\n        tupla = (pais,puntos_p)\n        listaf.append(tupla)\n    return listaf\n\nlistaf = calcular_puntajes(l_partidos,l_goles)\nprint(listaf)\n"}
{"prompt": "\nEscriba un programa que imprima todos los n\u00fameros del 1 al 100.\n", "completion": "\n[print(x) for x in range(1,101)]\n"}
{"prompt": "\nEscriba un programa que imprima todos los n\u00fameros pares del 1 al 100.\n", "completion": "\nfor x in range(1,101):\n    if (x%2) == 0 :\n        print(x)\n"}
{"prompt": "\nEscriba un programa que imprima todos los n\u00fameros impares del 1 al 100.\n", "completion": "\nfor x in range(1,101):\n    if (x%2) != 0 :\n        print(x)\n"}
{"prompt": "\nEscriba un programa que imprima todos los n\u00fameros que existen entre dos numeros dados por el usuario.\n", "completion": "\nnum1 = int( input(\"Ingrese un numero inicial : \") )\nnum2 = int( input(\"Ingrese un numero final: \") )\nif num1 < num2 :\n    [print(x) for x in range(num1+1,num2)]\nelse :\n    [print(x) for x in range(num1-1,num2,-1)]\n"}
{"prompt": "\nEscriba un programa que imprima todos los n\u00fameros pares que existes entre dos numeros dados por el usuario.\n", "completion": "\nnum1 = int( input(\"Ingrese un numero inicial : \") )\nnum2 = int( input(\"Ingrese un numero final: \") )\nif num1 < num2 :\n    for x in range(num1+1,num2):\n        if (x%2) == 0 :\n            print(x)\nelse :\n    for x in range(num1-1,num2,-1):\n        if (x%2) == 0 :\n            print(x)\n"}
{"prompt": " \nEscriba un programa que lea un n\u00famero de n cifras impares y determine si es igual al rev\u00e9s del n\u00famero.\n", "completion": "\nnum1 = input (\"Ingrese un numero de n cifras impares: \") \nnum2 = num1[::-1]\nprint(num2)\nif num1 == num2 :\n    print(\"Es igual al rev\u00e9s del n\u00famero\")\nelse: \n    print(\"No es igual al rev\u00e9s del n\u00famero\")\n"}
{"prompt": " \nEscriba una funci\u00f3n que reciba una palabra y verifique si es pal\u00edndroma o no es pal\u00edndroma(Al rev\u00e9s se escriba igual).\n", "completion": "\ndef es_Palindroma(palabra) :\n    al_reves = palabra[::-1]\n    if palabra == al_reves :\n        print(\"Es pal\u00edndroma\")\n    else: \n        print(\"No es pal\u00edndroma\")\n\nes_Palindroma(\"reconocer\")\n"}
{"prompt": "\nLa nota pr\u00e1ctica de fundamentos de programaci\u00f3n es el promedio de todos los talleres; sin\nembargo, decide eliminar la nota de taller m\u00e1s baja y promediar el resto. Escriba un programa que\nle pregunte al estudiante cuantos talleres ha dado, le pida ingresar las de los mismos, y le muestre\ncu\u00e1l fue su taller m\u00e1s bajo y cu\u00e1l es su promedio con esa medida.\n", "completion": "\nn_talleres = int( input(\"Ingrese el n\u00famero de talleres: \") )\nnotas_todas = []\nfor x in range(n_talleres):\n    nota = float( input(f\"Ingrese la nota del taller {x+1}: \") )\n    notas_todas.append(nota)\nnotas = notas_todas.copy()\nnotas.sort(reverse=True)\nbajo = notas.pop()\npromedio = sum(notas)/len(notas)\npos = notas_todas.index(bajo)\nprint(f\"La nota m\u00e1s baja es el taller {pos+1} con {bajo}  y el promedio final es {promedio}\")\n"}
{"prompt": "\nEscriba tres funciones que imprima un mensaje de saludo:\n1. Que no reciba par\u00e1metros y no retorne nada.\n2. Que reciba como par\u00e1metro un nombre y lo incluya en el saludo.\n3. Que pueda recibir un nombre par\u00e1metro o no, en caso de que lo reciba incl\u00fayalo en el saludo,\ncaso contrario que el saludo sea gen\u00e9rico, y que retorne el saludo.\n", "completion": "\ndef funcion1 () : \n    print (\"Hola\")\n\ndef funcion2 (nombre) :\n    print (f\"Hola {nombre}\")\n\ndef funcion3 (nombre = None):\n    if nombre == None:\n        print (\"Hola \")\n    else : \n        print (f\"Hola {nombre}\")\nEjemplo\nfuncion1()\nfuncion2(\"Taws\")\nfuncion3()\nfuncion3(\"Swat\")\n"}
{"prompt": "\nImplemente una funci\u00f3n, que nos devuelva el volumen de una esfera. Devuelva -1 si el radio es\nmenor o igual a 0.\n", "completion": "\nimport math\ndef volumen_Esfera (radio):\n    if radio < 0 : \n        return -1\n    else :\n        return (4/3) * (math.pi) * (radio**3)\nEjemplo\nprint(volumen_Esfera(2))\nprint(volumen_Esfera(-1))\n\n"}
{"prompt": "\nImplemente una funci\u00f3n, que reciba una lista cualquiera de enteros, y devuelva otra lista sin\nelementos repetidos.\n", "completion": "\ndef eliminar_Repetidos (lista):\n    lista2 = []\n    for x in lista :\n        if x not in lista2 :\n            lista2.append(x)\n    return lista2\n\nAplicando conjuntos, pero aqui pierden el orden \ndef eliminar_Repetidos_2 (lista):\n    return list(set(lista))\n\nprint( eliminar_Repetidos([2,3,4,2,1]) ) \nprint( eliminar_Repetidos_2([2,3,4,2,1]) )\n"}
{"prompt": "\nImplemente una funci\u00f3n, que reciba una lista con nombres completos de personas(2 nombres y 2 apellidos ) y un string con el\nnombre a buscar. Usando las funciones de string, devuelva una lista, que contenga los nombres completos de las personas donde el nombra a buscar coincida con los nombres de la persona, \nNota: al momento de verificar si son iguales no tome en cuenta si las May\u00fasculas y Min\u00fasculas.\ndef buscar(arreglo, nombreABuscar).\n", "completion": "\ndef buscar (arreglo, nombreABuscar) : \n    lista = []\n    for nombre_c in arreglo :\n        nombre_c = nombre_c.strip().lower()\n        if nombreABuscar.lower() in nombre_c.split(\" \") :\n            lista.append(nombre_c.title())\n    return lista\n\nEjemplo\nlista = [\"Pepito Juanito Mercado Diaz\",\n        \"Lionel Andr\u00e9s Messi Cuccittini\",\n        \"Cristiano Ronaldo Dos Santos Aveiro\",\n        \"Neymar da_Silva Santos J\u00fanior\",\n        \"Kylian Mbapp\u00e9 Lottin\",\n        \"Lionel Kylian Caicedo Perez\",\n        \"Neymar Cristiano Paez Diaz\"]\nprint(buscar (lista, \"Neymar\"))\n"}
{"prompt": "\nImplemente una que reciba un numero entero positivo y determine el factorial de ese n\u00famero.\n", "completion": "\ndef factorial (num) : \n    if num == 0 : \n        return 1\n    else :\n        return num * factorial(num-1)\nprint(factorial(4))\n"}
